[{"content":"Em in√∫meras situa√ß√µes as nossas requisi√ß√µes HTTP comunicam-se com API\u0026rsquo;s que recebem um alto volume de tr√°fego, portanto √°s vezes retornando respostas indesejadas, os famosos 5xx.\nFelizmente existe uma biblioteca em Go feito pela Hashicorp chamada go-retryablehttp que pode nos ajudar, observe o exemplo abaixo üëá\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;log\u0026#34; \u0026#34;time\u0026#34; \u0026#34;github.com/hashicorp/go-retryablehttp\u0026#34; ) func main() { //Cria um novo http client c := retryablehttp.NewClient() //Configura o client para 10 tentativas c.RetryMax = 10 //Configura o m√≠nimo de tempo de espera c.RetryWaitMin = 1 * time.Second //Configura o m√°ximo tempo de espera c.RetryWaitMax = 10 * time.Second request, err := retryablehttp.NewRequest(\u0026#34;GET\u0026#34;, \u0026#34;http://example.com\u0026#34;, nil) if err != nil { log.Fatalln(err) } resp, err := c.Do(request) if err != nil { log.Fatalln(err) } fmt.Printf(\u0026#34;Requisi√ß√£o retornada com status %d\\n\u0026#34;, resp.StatusCode) } A biblioteca por s√≠ s√≥ j√° tem fun√ß√µes padr√µes para gerenciar o Backoff por√©m voc√™ pode tamb√©m passar fun√ß√µes customizadas para lidar com as respostas de erro.\ntype Client struct { HTTPClient *http.Client // Internal HTTP client. Logger interface{} // Customer logger instance. Can be either Logger or LeveledLogger RetryWaitMin time.Duration // Minimum time to wait RetryWaitMax time.Duration // Maximum time to wait RetryMax int // Maximum number of retries // RequestLogHook allows a user-supplied function to be called // before each retry. RequestLogHook RequestLogHook // ResponseLogHook allows a user-supplied function to be called // with the response from each HTTP request executed. ResponseLogHook ResponseLogHook // CheckRetry specifies the policy for handling retries, and is called // after each request. The default policy is DefaultRetryPolicy. CheckRetry CheckRetry // Backoff specifies the policy for how long to wait between retries Backoff Backoff // ErrorHandler specifies the custom error handler to use, if any ErrorHandler ErrorHandler loggerInit sync.Once clientInit sync.Once } ","objectID":"7780968f121f54d86b8b9e6cb5552037","title":"Re-envio de requisi√ß√µes HTTP em GO","url":"https://www.byteverso.com/docs/golang/retryhttp/"}]
