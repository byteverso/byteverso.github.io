<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Home on BYTEVERSO</title>
    <link>https://www.byteverso.com/</link>
    <description>Recent content in Home on BYTEVERSO</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>
</copyright>
    <lastBuildDate>Thu, 28 Feb 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://www.byteverso.com/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Configura√ß√£o de servi√ßos eficaz e r√°pida em Go</title>
      <link>https://www.byteverso.com/golang/tutoriais/parse-automatico-variaveis-ambiente/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.byteverso.com/golang/tutoriais/parse-automatico-variaveis-ambiente/</guid>
      <description><![CDATA[Por qu√™? √â muito vantajoso ser capaz de f√°cilmente configurar servi√ßos em produ√ß√£o sem realizar altera√ß√µes de c√≥digo.
Mas quais tipos de configura√ß√£o? os par√¢metros mais comuns a serem expostos s√£o:
Endere√ßos de API Caminho de arquivos e diret√≥rios do sistema operacional N√≠vel de log (Error, Warning, Info, Debug) Timeouts de clientes HTTP e banco e dados TTL de cache (Time to Live) N√∫mero de workers Tendo em vista que nem todas as equipes possuem um processo de release simples, em que basta voc√™ fazer um commit para alterar o que est√° em produ√ß√£o, √© bastante interessante ter estas configura√ß√µes &ldquo;expostas&rdquo; e n√£o &ldquo;hard-coded&rdquo;, pois em momentos cr√≠ticos podem ser cr√∫ciais na mitiga√ß√£o de incidentes.]]></description>
    </item>
    
    <item>
      <title>Re-envio de requisi√ß√µes HTTP em Go</title>
      <link>https://www.byteverso.com/golang/tutoriais/go-http-inteligente/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.byteverso.com/golang/tutoriais/go-http-inteligente/</guid>
      <description><![CDATA[Em in√∫meras situa√ß√µes as nossas requisi√ß√µes HTTP comunicam-se com API&rsquo;s que recebem um alto volume de tr√°fego, portanto √°s vezes retornando respostas indesejadas, os famosos 5xx.
Felizmente existe uma biblioteca em Go feito pela Hashicorp chamada go-retryablehttp que pode nos ajudar, observe o exemplo abaixo üëá
package main import ( &#34;fmt&#34; &#34;log&#34; &#34;time&#34; &#34;github.com/hashicorp/go-retryablehttp&#34; ) func main() { //Cria um novo http client c := retryablehttp.NewClient() //Configura o client para 10 tentativas c.]]></description>
    </item>
    
  </channel>
</rss>

